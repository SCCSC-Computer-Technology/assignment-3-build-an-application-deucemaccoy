#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace andrew_foster_cpt_206_lab_2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StateInfo")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::andrew_foster_cpt_206_lab_2.Properties.Settings.Default.StateInfoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _state1;
		
		private string _name;
		
		private string _flag;
		
		private string _flower;
		
		private string _bird;
		
		private string _colors;
		
		private System.Nullable<int> _population;
		
		private string _first_city;
		
		private string _second_city;
		
		private string _third_city;
		
		private string _capitol;
		
		private System.Nullable<int> _income;
		
		private System.Nullable<double> _it_jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onstate1Changing(int value);
    partial void Onstate1Changed();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnflagChanging(string value);
    partial void OnflagChanged();
    partial void OnflowerChanging(string value);
    partial void OnflowerChanged();
    partial void OnbirdChanging(string value);
    partial void OnbirdChanged();
    partial void OncolorsChanging(string value);
    partial void OncolorsChanged();
    partial void OnpopulationChanging(System.Nullable<int> value);
    partial void OnpopulationChanged();
    partial void Onfirst_cityChanging(string value);
    partial void Onfirst_cityChanged();
    partial void Onsecond_cityChanging(string value);
    partial void Onsecond_cityChanged();
    partial void Onthird_cityChanging(string value);
    partial void Onthird_cityChanged();
    partial void OncapitolChanging(string value);
    partial void OncapitolChanged();
    partial void OnincomeChanging(System.Nullable<int> value);
    partial void OnincomeChanged();
    partial void Onit_jobsChanging(System.Nullable<double> value);
    partial void Onit_jobsChanged();
    #endregion
		
		public State()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="state", Storage="_state1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int state1
		{
			get
			{
				return this._state1;
			}
			set
			{
				if ((this._state1 != value))
				{
					this.Onstate1Changing(value);
					this.SendPropertyChanging();
					this._state1 = value;
					this.SendPropertyChanged("state1");
					this.Onstate1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flag", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string flag
		{
			get
			{
				return this._flag;
			}
			set
			{
				if ((this._flag != value))
				{
					this.OnflagChanging(value);
					this.SendPropertyChanging();
					this._flag = value;
					this.SendPropertyChanged("flag");
					this.OnflagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flower", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string flower
		{
			get
			{
				return this._flower;
			}
			set
			{
				if ((this._flower != value))
				{
					this.OnflowerChanging(value);
					this.SendPropertyChanging();
					this._flower = value;
					this.SendPropertyChanged("flower");
					this.OnflowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bird", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string bird
		{
			get
			{
				return this._bird;
			}
			set
			{
				if ((this._bird != value))
				{
					this.OnbirdChanging(value);
					this.SendPropertyChanging();
					this._bird = value;
					this.SendPropertyChanged("bird");
					this.OnbirdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_colors", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string colors
		{
			get
			{
				return this._colors;
			}
			set
			{
				if ((this._colors != value))
				{
					this.OncolorsChanging(value);
					this.SendPropertyChanging();
					this._colors = value;
					this.SendPropertyChanged("colors");
					this.OncolorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_population", DbType="Int")]
		public System.Nullable<int> population
		{
			get
			{
				return this._population;
			}
			set
			{
				if ((this._population != value))
				{
					this.OnpopulationChanging(value);
					this.SendPropertyChanging();
					this._population = value;
					this.SendPropertyChanged("population");
					this.OnpopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_city", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string first_city
		{
			get
			{
				return this._first_city;
			}
			set
			{
				if ((this._first_city != value))
				{
					this.Onfirst_cityChanging(value);
					this.SendPropertyChanging();
					this._first_city = value;
					this.SendPropertyChanged("first_city");
					this.Onfirst_cityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_second_city", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string second_city
		{
			get
			{
				return this._second_city;
			}
			set
			{
				if ((this._second_city != value))
				{
					this.Onsecond_cityChanging(value);
					this.SendPropertyChanging();
					this._second_city = value;
					this.SendPropertyChanged("second_city");
					this.Onsecond_cityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_third_city", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string third_city
		{
			get
			{
				return this._third_city;
			}
			set
			{
				if ((this._third_city != value))
				{
					this.Onthird_cityChanging(value);
					this.SendPropertyChanging();
					this._third_city = value;
					this.SendPropertyChanged("third_city");
					this.Onthird_cityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_capitol", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string capitol
		{
			get
			{
				return this._capitol;
			}
			set
			{
				if ((this._capitol != value))
				{
					this.OncapitolChanging(value);
					this.SendPropertyChanging();
					this._capitol = value;
					this.SendPropertyChanged("capitol");
					this.OncapitolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_income", DbType="Int")]
		public System.Nullable<int> income
		{
			get
			{
				return this._income;
			}
			set
			{
				if ((this._income != value))
				{
					this.OnincomeChanging(value);
					this.SendPropertyChanging();
					this._income = value;
					this.SendPropertyChanged("income");
					this.OnincomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_it_jobs", DbType="Float")]
		public System.Nullable<double> it_jobs
		{
			get
			{
				return this._it_jobs;
			}
			set
			{
				if ((this._it_jobs != value))
				{
					this.Onit_jobsChanging(value);
					this.SendPropertyChanging();
					this._it_jobs = value;
					this.SendPropertyChanged("it_jobs");
					this.Onit_jobsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
